// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FieldType {
  COURT
  GRASSFIELD
}

enum Sport {
  BASKETBALL
  FOOTBALL
  BEACHTENNIS
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum GameType {
  FREE
  VERSUS
  X1
}

enum EntityType {
  USER
  TEAM
}

model User {
  id        String  @id @default(uuid())
  name      String  @db.VarChar(255)
  email     String  @unique @db.VarChar(255)
  username  String  @unique @db.VarChar(50)
  telephone String
  addressId String?
  avatar    String? @db.VarChar(255)

  Address      Address?       @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Team         Teams[]
  GamesOnUsers GamesOnUsers[]
}

model Teams {
  id        String  @id @default(uuid())
  name      String
  logo      String?
  teamOwner String

  Users        User[]
  GamesOnTeams GamesOnTeams[]
}

model Address {
  id           String  @id @default(uuid())
  street       String  @db.VarChar(255)
  number       String  @db.VarChar(10)
  complement   String? @db.VarChar(100)
  neighborhood String  @db.VarChar(255)
  city         String  @db.VarChar(255)
  state        String  @db.VarChar(255)
  country      String  @db.VarChar(255)
  zipcode      String  @db.VarChar(50)
  longitude    String? @db.VarChar(255)
  latitude     String? @db.VarChar(255)

  User User[]
  Spot Spot[]
}

model Spot {
  id        String  @id @default(uuid())
  name      String
  logo      String?
  addressId String?

  Address Address? @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  Field        Field[]
  WorkingHours workingHour[]
  Games        Games[]
}

model Field {
  id       String    @id @default(uuid())
  name     String
  capacity Int
  spotId   String
  type     FieldType
  sport    Sport

  Spot  Spot    @relation(fields: [spotId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Games Games[]
}

model workingHour {
  id        Int    @id @default(autoincrement())
  day       Day
  openHour  String
  closeHour String
  spotId    String

  Spot Spot @relation(fields: [spotId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([spotId, day])
}

model Games {
  id        String   @id @default(uuid())
  name      String
  startTime DateTime
  endTime   DateTime
  type      GameType
  spotId    String
  fieldId   String
  result    String? // To store the result of the game
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Spot        Spot           @relation(fields: [spotId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Field       Field          @relation(fields: [fieldId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Users       GamesOnUsers[]
  Teams       GamesOnTeams[]
  GameResults GameResults[]

  @@unique([fieldId, startTime, endTime]) // Ensure no overlapping games on the same field
}

model GamesOnUsers {
  id     String @id @default(uuid())
  gameId String
  userId String

  Games Games @relation(fields: [gameId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  User  User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([gameId, userId])
}

model GamesOnTeams {
  id     String @id @default(uuid())
  gameId String
  teamId String

  Games Games @relation(fields: [gameId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Teams Teams @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([gameId, teamId])
}

model GameResults {
  id         String     @id @default(uuid())
  gameId     String
  entityId   String
  entityType EntityType
  score      Int

  Games Games @relation(fields: [gameId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([gameId, entityId, entityType])
}
